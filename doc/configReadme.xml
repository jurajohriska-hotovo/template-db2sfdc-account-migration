<?xml version="1.0"?>
<configuration>
	<placeholders>
		<placeholder id="template_name">database to Salesforce account Migration</placeholder>
	</placeholders>
	<sections>
		<section id="use_case">
This template helps you migrate accounts from a database to a Salesforce instance, and to specify filtering criteria and behavior for when an account already exists in the destination instance. 

This template leverages Mule batch module and is divided into Input, Process, and On Complete stages.
During the Input stage, the template queries the database for all the existing accounts that match the filter criteria.
Each database account is filtered depending on if it has an existing matching account in Salesforce.
The last step of the Process stage groups the accounts and upserts them in Salesforce based on the name.
Finally during the On Complete stage, the template outputs statistics data to the console and sends a notification email with the results of the batch execution. 
		</section>
		<section id="considerations">
<![CDATA[
To make this template run, there are certain preconditions that must be considered. All of them deal with the preparations in both source (database) and destination (Salesforce) systems, that must be made in order for all to run smoothly. 
Failling to do so could lead to unexpected behavior of the template.

This template illustrates the migration use case between a database and Salesforce, thus it requires a database instance to work.
]]>
		</section>
		<section id="run_it">
<![CDATA[
**Note:** This template illustrates the migration use case between Salesforce and a database, thus it requires a database instance to work.

The template comes packaged with a SQL script to create the database table that it uses. 
It is your responsibility to use the script to create the table in an available schema and change the configuration accordingly. The SQL script file can be found in src/main/resources/account.sql.
This template is customized for MySQL. To use it with different SQL implementation, some changes are necessary:

* Update SQL script dialect to desired one.
* Replace MySQL driver library dependency to desired one in the pom.xml file.
* Replace the  `driverClassName` attribute of the `db:generic-config` element with a class name of the JDBC driver in src/main/app/config.xml.
* Update the JDBC URL in the `mule.*.properties` file.
This is an example of the output you see after browsing to the HTTP endpoint:

<pre>
<h1>Batch Process initiated</h1>
<b>ID:</b>6eea3cc6-7c96-11e3-9a65-55f9f3ae584e<br/>
<b>Records to Be Processed: </b>9<br/>
<b>Start execution on: </b>Wed Sep 09 10:05:33 GMT-03:00 2018
</pre>
]]>
		</section>
		<section id="running_on_standalone">
<![CDATA[
To trigger the use case you just need to browse to the local HTTP connector with the port you configured in your file. If this is, for instance, `9090` then you should browse to: `http://localhost:9090/migrateaccounts`. This invokes the application, outputs a summary report, and sends it in the email addresses you configured.
]]>
		</section>
		<section id="running_on_cloudhub">
<![CDATA[
After your app is configured and running, if you choose as domain name `db2sfdcaccountmigration` to trigger the use case, browse to `http://db2sfdcaccountmigration.cloudhub.io/migrateaccounts` which invokes the application, outputs a summary report, and sends it in the email addresses you configured.]]>
		</section>
		<section id="application_configuration">
		<![CDATA[
**Application Configuration**
+ http.port `9090`
+ page.size `200`

**database Connector Configuration**
+ db.jdbcUrl `jdbc:mysql://localhost:3306/mule?user=mule&password=mule`

**SalesForce Connector Configuration**
+ sfdc.username `joan.baez@org`
+ sfdc.password `JoanBaez456`
+ sfdc.securityToken `ces56arl7apQs56XTddf34X`
+ sfdc.url `https://login.salesforce.com/services/Soap/u/32.0`

**SMTP Services Configuration**
+ smtp.host `smtp.gmail.com`
+ smtp.port `587`
+ smtp.user `email%40example.com`
+ smtp.password `password` 

**Email Details**
+ mail.from `batch.migrateaccounts.migration%40mulesoft.com`
+ mail.to `polly.hedra@mulesoft.com`
+ mail.subject `Batch Job Finished Report`
]]>
		</section>
		<section id="api_calls">
		<![CDATA[
Salesforce imposes limits on the number of API calls that can be made. Therefore calculating this amount is important to consider. This template calls to the API can be calculated using the formula:

***1 + X + X / 200***

***X*** is the number of accounts to be synchronized on each run.

Divide by ***200*** because by default, accounts are gathered in groups of 200 for each upsert API Call in the commit step. Also consider that these calls are executed repeatedly every polling cycle.	
For instance if 10 records are fetched from origin instance, then 12 API calls are made (1 + 10 + 1).
]]>
		</section>
		<section id="default_endpoints_xml">
		<![CDATA[
This is the file where to find the inbound and outbound sides of your integration app.
This template has only an HTTP Listener connector) as the way to trigger the use case.

**HTTP Listener Connector** - Start Report Generation
+ `${http.port}` is set as a property to be defined either on a property file or in CloudHub environment variables.
+ The path configured by default is `migrateaccounts` which you are free to change for the one you prefer.
+ The host name for all endpoints in your CloudHub configuration should be defined as `localhost`. CloudHub routes requests from your application domain URL to the endpoint.
+ The endpoint is *request-response* since as a result of calling it the response is the total number of accounts synced and filtered by the criteria specified.
]]>
		</section>
		<section id="default_business_logic_xml">
		<![CDATA[
Functional aspects of the template are implemented on this XML, directed by one flow responsible of excecuting the logic.
For the pourpose of this template, the *mainFlow* executes a batch job that handles all its logic.
This flow has an exception strategy that consists of invoking the *defaultChoiseExceptionStrategy* defined in *errorHandling.xml* file.
]]>
		</section>
	</sections>
</configuration>
